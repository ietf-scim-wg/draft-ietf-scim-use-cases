<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.19 (Ruby 3.3.5) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="trust200902" docName="draft-ietf-scim-use-cases-00" category="info" submissionType="IETF">
  <front>
    <title abbrev="SCIM Use Cases">System for Cross-domain Identity Management: Definitions, Overview, Concepts, and Requirements</title>

    <author initials="P. J." surname="Correia" fullname="Paulo Jorge Correia">
      <organization>Cisco Systems</organization>
      <address>
        <email>paucorre@cisco.com</email>
      </address>
    </author>
    <author initials="P." surname="Dingle" fullname="Pamela Dingle">
      <organization>Microsoft Corporation</organization>
      <address>
        <email>pamela.dingle@microsoft.com</email>
      </address>
    </author>

    <date year="2025" month="January" day="16"/>

    
    <workgroup>SCIM</workgroup>
    <keyword>Internet-Draft</keyword> <keyword>SCIM</keyword>

    <abstract>


<?line 41?>

<t>This document provides definitions, overview and selected use cases of the System for Cross-domain Identity Management (SCIM).  It lays out the system's concepts, models, and flows, and it includes use cases, and implementation considerations.</t>



    </abstract>



  </front>

  <middle>


<?line 45?>

<section anchor="introduction"><name>Introduction</name>
<t>The System for Cross-domain Identity Management (SCIM) family of specifications <xref target="RFC7643"></xref> and <xref target="RFC7644"></xref> is designed to manage resources used in the practice of identity management that need to be communicated across internet domains and services, with users and groups as the default resources supported (and an extensibility model for additional resource definitions).
The specifications have two primary goals:
 1. A common representation of a resource object and its attributes.
 2. Standardized patterns for how those resources can be operated on, including "CRUD" operations (Create, Read, Update, Delete) for resource objects and more advanced goals such as search filters, synchronization of large resource populations, etc.
These goals are codified as a data model in <xref target="RFC7643"></xref>, which defines resources, attributes, and default schemas, as well as a protocol definition built on HTTP in <xref target="RFC7644"></xref>. By standardizing the data model and protocol for resource management, entire ecosystems can achieve better interoperability, security, and scalability.</t>

<t>This document provides definitions, overviews, concepts, flows, and use cases that implementers may need to understand the design and applicability of the SCIM schema <xref target="RFC7643"></xref> and SCIM protocol <xref target="RFC7644"></xref>. Unlike some protocols like Application Bridging for Federated Access Beyond Web (ABFAB) and SAML2 WebSSO, SCIM provides provisioning and de-provisioning of resources in a separate context from authentication. While SCIM is a protocol that standardizes the movement of data only between two parties in an HTTP client-server model, this document discusses implementation patterns that use concepts beyond the core schema and protocol, which are necessary to understand how SCIM actions can fit into larger architectures.</t>

</section>
<section anchor="terminology"><name>Terminology</name>
<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"></xref> when they appear in ALL CAPS. These words may also appear in this document in lowercase as plain English words, absent their normative meanings. Here is a list of acronyms and abbreviations used in this document:
 * CRUD: Create, Read, Update, Delete
 * ERC: External Resource Creator 
 * IaaS: Infrastructure as a Service
 * IDaaS: Identity as a Service
 * IdM: Identity Manager
 * JIT: Just In Time
 * RC: Resource Creator
 * RU: Resource Updater
 * RM: Resource Manager 
 * RS: Resource Subscriber 
 * RO: Resource Object 
 * RA: Resource Attribute 
 * SaaS: Software as a Service
 * SAML: Security Assertion Markup Language
 * SCIM: System for Cross-domain Identity Management
 * SET: Security Event Token
 * SSO: Single Sign-On</t>

</section>
<section anchor="scim-components-and-architecture"><name>SCIM Components and Architecture</name>
<t>The SCIM architecture is a client-server model centered on a normative concept of a "resource." Resources have types (such as a user or a group), and each unique instance of a resource type is represented by a JSON object, accessed via a standardized REST API. Each resource object can be managed individually or in bulk using actions that by default are specified in <eref target="HTTP GET, PUT, POST, etc.">RFC9110</eref>, but may also expand to concepts in extension documents, such as security event tokens (SETs). This model enables organizations to represent information about user populations and the groups those user populations are part of using the core specifications, and to extend to other important resources using extension drafts in the same family, with the high-level concept of performing SCIM actions on resource objects. SCIM actions result in resource objects and associated data "moving" between the client and server, as clients actively push and pull information that reflects changes over time. This communication of data enables systems within domains and across domains to operate on the freshest possible version of object state.</t>

<figure><artwork><![CDATA[
 +---------+                       +--------+
 |  SCIM   |                       |        | 
 | Server  |                       |        | 
 |         | <--- SCIM Action ---  |  SCIM  |
 | /Users  |                       | Client |
 | /Groups |                       |        |
 | /Device |                       |        |
 +---------+                       +--------+
    Figure 1: SCIM Components
]]></artwork></figure>

<t>The intent of the SCIM specification is to reduce the cost and complexity of resource management operations by providing common schemas and an extension model, as well as binding documents to offer patterns for exchanging this schema using standard protocols. In essence, it aims to make it fast, cheap, and easy to move resources into, out of, and around applications.
 The SCIM scenarios are overviews of user stories designed to help clarify the intended scope of the SCIM effort.</t>

<section anchor="implementation-concepts"><name>Implementation Concepts</name>
<t>To understand the use cases, we need to familiarize ourselves with five different concepts of the SCIM protocol: Data Models, Protocol Roles, Orchestrator Roles, Triggers, and Actions.</t>

<section anchor="data-models"><name>Data Models</name>
<t>SCIM defines two types of data entities: Resources and Attributes.</t>

<section anchor="resource-object-ro"><name>Resource Object (RO)</name>
<t>A JSON object representing a user, group (or extension object like devices) used by the CRUD operations through the SCIM protocol. The Resource Object contains attributes defined by schemas such as those defined in <xref target="RFC7643"></xref> and can be implemented via the endpoints and parameters defined in <xref target="RFC7644"></xref>.</t>

</section>
<section anchor="resource-attribute-ra"><name>Resource Attribute (RA)</name>
<t>A named element of a Resource Object (RO). Attributes are defined in section 2 of <xref target="RFC7643"></xref> and include characteristics like cardinality (single or multiple values), data types (string, boolean, binary, etc.), and characteristics (required, unique, etc.).</t>

</section>
</section>
<section anchor="protocol-roles"><name>Protocol Roles</name>
<t>SCIM is based on the HTTP protocol; HTTP client and server roles are defined in <xref target="RFC9110"></xref> and <xref target="RFC9112"></xref>. Any SCIM interaction requires one participant to be a SCIM server and the other to be a SCIM client.</t>

<section anchor="scim-server-also-known-as-a-scim-service-provider"><name>SCIM Server (also known as a SCIM Service Provider)</name>
<t>An HTTP web application that provides identity information via the SCIM protocol. A SCIM Server is a RESTful API endpoint offering access to a data model that can be used to push or pull data between two parties. SCIM servers have additional responsibilities such as API security, managing client identifiers and keys, as well as performance management such as API throttling.</t>

</section>
<section anchor="scim-client"><name>SCIM Client</name>
<t>A website or application that uses the SCIM protocol to manage identity data maintained by the service provider. The client can initiate SCIM HTTP requests to a target SCIM Server. A SCIM Client is active software that can push or pull data between two parties.</t>

</section>
</section>
<section anchor="orchestrator-roles"><name>Orchestrator Roles</name>
<t>Orchestrators are the operating parties that take part in a SCIM protocol exchange and ensure data is moving in the correct flows. 
An entity can have one or more orchestrator roles, depending on the overall architecture.</t>

<section anchor="resource-creator-rc"><name>Resource Creator (RC)</name>
<t>An entity responsible for creating the Resource Object (RO). Typically, this role is found in HR or Resource Management (RM) applications that are responsible for creating resources and their attributes.</t>

</section>
<section anchor="resource-updater-ru"><name>Resource Updater (RU)</name>
<t>An entity responsible for updating specific Resource Attributes (RA) of a Resource Object (RO) or the RO itself. Typically, this role is used in conjunction with other SCIM roles that allow this SCIM entity to manage specific Resource Attributes (RA) and/or Resource Objects (RO).</t>

</section>
<section anchor="resource-manager-rm"><name>Resource Manager (RM)</name>
<t>An entity that aggregates or transforms Resource Objects (RO) from resource creators/updaters (RC/RU) and makes them available for Resource Subscribers (RS) using multiple SCIM interactions. An example of this role could be an Identity-as-a-Service (IDaaS) cloud service.</t>

</section>
<section anchor="resource-subscriber-rs"><name>Resource Subscriber (RS)</name>
<t>An entity that consumes Resource Objects (RO) and typically doesn't create new Objects or Attributes. An example would be a SaaS application that delivers a service and needs to create a database of Objects and would get those from an RM/RC/RU.</t>

</section>
<section anchor="external-resource-creator-erc"><name>External Resource Creator (ERC)</name>
<t>An entity that has information about Resource Objects (RO) and their Resource Attributes (RA) but does not participate in SCIM flows. Examples include databases or internally-facing applications.</t>

<figure><artwork><![CDATA[
   +-------------+ +-------------+   +-------------+ +-------------+
   |(RO) Resource| |(RA) Resource|   |(RO) Resource| |(RA) Resource|
   |   Object1   | |  Attribute1 |   |   Object2   | |  Attribute2 |
   +-------------+ +-------------+   +-------------+ +-------------+
          |               |                 |               |
   +-------------+ +-------------+   +-------------+ +-------------+
   |(RC) Resource| |(RU) Resource|   |(RC) Resource| |(RU) Resource|
   |  Creators   | |  Updaters   |   |  Creators   | |  Updaters   |
   +-------------+ +-------------+   +-------------+ +-------------+
       |               |                 |                |
       +--------+------+-----------------+-------+--------+
                |                                |
                v                                v
       +----------------+              +----------------+
       | (RM) Resource  |              | (RM) Resource  |
       |     Manager    |              |     Manager    |
       +----------------+              +----------------+
                |                                |
       +----------------+              +----------------+
       |                |              |                |
       v                v              v                v
  +-------------+ +-------------+   +-------------+ +-------------+
  |(RS) Resource| |(RS) Resource|   |(RS) Resource| |(RS) Resource|
  |  Subscriber | |  Subscriber |   |  Subscriber | |  Subscriber |
  +-------------+ +-------------+   +-------------+ +-------------+
          |                                  |
    +----------------+                  +----------------+
    |                |                  |                |
    v                v                  v                v
 +-------------+ +-------------+   +-------------+ +-------------+
 |(RO) Resource| |(RO) Resource|   |(RO) Resource| |(RO) Resource|
 |   Object1   | |   Object2   |   |   Object1   | |   Object2   |
 +-------------+ +-------------+   +-------------+ +-------------+
    Figure 2: SCIM Orchestrators Roles
]]></artwork></figure>

</section>
</section>
<section anchor="triggers"><name>Triggers</name>
<t>Triggers are activities that may cause a SCIM action to occur. Triggers can result from business processes like a corporate hiring event, scheduled events such as a Unix bash script running as a cron job, or SSO just-in-time events arriving at a federated relying party that identifies a previously unseen user. Triggers can also be standardized events, such as those in the OpenID Shared Signals Framework. Triggers are used to initiate CRUD (Create, Read, Update, Delete) operations using SCIM Actions. The use cases described in this document can use one or multiple trigger mechanisms to achieve the goal of the SCIM element.</t>

<section anchor="periodic-intervals"><name>Periodic Intervals</name>
<t>A periodic interval trigger is a pre-configured agreement where a SCIM client or server performs an action at a specific time. This trigger is often recurring and typically initiates an action from the SCIM Client, though in some use cases it can be done by the SCIM Server. An example of a periodic interval trigger could be a UNIX cron job calling a script.</t>

</section>
<section anchor="events"><name>Events</name>
<t>Event triggers are activities, contexts, or notifications that could happen at any time. A SCIM client may be configured to perform a given SCIM action in response to a specific event, such as an entry written into an audit log, a signal of a corporate workflow completion, or a device management platform notification. SCIM actions could also be triggered by a Security Event Token (SET) as described in <xref target="RFC8417"></xref> or a SCIM event corresponding to <xref target="SCIM Profile for Security Event Tokens"></xref>.</t>

</section>
<section anchor="application-triggers"><name>Application Triggers</name>
<t>Application triggers occur when administrative or end-user interfaces are manipulated. An example of an application trigger might be a user modifying their profile information, resulting in a SCIM client performing an HTTP POST to update the user's resource object at the SCIM server. Another example might be an Identity Administrator creating a new User in the IdM, who immediately wants to update one or more resource Subscribers (typically a SaaS application that is a SCIM Server).</t>

</section>
<section anchor="sso-single-sign-on"><name>SSO (Single Sign-On)</name>
<t>Single Sign-On triggers occur when a user authenticates via federated protocols such as SAML 2.0 or OpenID Connect. If a federated assertion arrives for a user who has not yet been provisioned into the destination application, the application may be triggered to perform just-in-time (JIT) provisioning. This trigger occurs in scenarios where a Single Sign-On flow happens, but not all the resource attributes for the user object are passed in the federated assertion, resulting in a SCIM action to push or pull the remaining needed attributes.</t>

<figure><artwork><![CDATA[
+---------------+                                   +---------------+
|               |                                   |               |
|               |                                   |               |
|               |                                   |     SCIM      |
|    Client     |                (1)                |    Server     | 
|               | <-------------------------------> |               |
|  (typically   |                                   | (typically an |
|   an IdM)     |                (2)                |      SaaS     |
|               | <-------------------------------> | Application)  |   
|               |                                   |               |
|    RC/RU/RM   |                                   |      RS       |
|               |                                   |               |
+---------------+                                   +---------------+
    Figure 3:  SCIM trigger using  Single Sign-On
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>An SSO trigger creates the user and might create some Resource Attributes (RA) of a Resource Object (RO).</t>
  <t>SCIM actions will then complement the attributes created initially through SSO JIT with additional Resource Attributes (RA) of the previously created Resource Objects (RO).
  This use case combines the SCIM protocol with other protocols used for Single Sign-On, especially in the context of JIT (Just-in-Time Provisioning). This is particularly useful with protocols like SAML, which are limited by the number of characters in the URL.</t>
</list></t>

</section>
</section>
<section anchor="scim-actions"><name>SCIM Actions</name>
<t>The SCIM protocol defines interactions between two standardized parties that conform to HTTP RESTful conventions. The protocol enables CRUD operations by mapping these activities to HTTP verbs such as POST, PUT, GET, DELETE, etc. The protocol itself doesn't assume a direction of data flow, and use cases discussed in section 4 are created using the orchestrator roles. A SCIM entity can have multiple roles depending on the objective of the use case being described.</t>

<section anchor="client-active-push"><name>Client active Push</name>
<t>A SCIM client uses HTTP verbs POST, PUT, or PATCH to create or update objects and/or attributes at a SCIM server. The SCIM client is actively "pushing" the data to the endpoint. This SCIM action can occur when the SCIM client is the primary Resource Creator/Updater (RC/RU).
  The most common and widely deployed example is a SCIM client providing information about a RO and its RA to a server, which is also called a SCIM Server in <xref target="RFC7643"></xref> and <xref target="RFC7644"></xref>.</t>

<figure><artwork><![CDATA[
+----------------+                                   +----------------+
|                |                                   |                |
|                |                                   |                |
|                |                                   |                |
|      SCIM      |                (1)                |      SCIM      |
|     Client     |  -------------------------------> |     Server     |
|                |                                   |                |
|                |                (2)                |                |
|                | <-------------------------------- |                |   
|     RM/RC/RU   |                                   |        RS      |
|                |                                   |                |
|                |                                   |                |
+----------------+                                   +----------------+
    Figure 4: SCIM action for Client Active Push
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>There will be push using a HTTP POST, PUT, PATCH, DELETE depending on the operation that the Client want to achieve at the Server.</t>
  <t>The Service Provider will return the RO/RA with additional metadata information to allow for audit.</t>
</list></t>

</section>
<section anchor="client-active-pull"><name>Client Active Pull</name>
<t>A SCIM client uses the HTTP GET verb to request data from a SCIM server. With the action of an active pull, the client will fetch one or multiple objects from the SCIM server.
 Client active pulls can be used in situations where a client needs to maintain a synchronized large body of objects, such as a device list or user address book, without the need to track individual Resource Objects (RO) or Resource Attributes (RA). There are also cases where the client performs a one-time pull of only one specific RO from a server that manages many ROs. For example, a mobile app (SCIM Client) may fetch the current license entitlement from a Device Manager (SCIM Server).</t>

<figure><artwork><![CDATA[
+----------+                                   +----------+
|          |                                   |          |
|          |                                   |          |
|          |                                   |          |
|   SCIM   |                (1)                |   SCIM   |
|  Server  | <-------------------------------- |  Client  |
|          |                                   |          |
|          |                (2)                |          |
|          | --------------------------------> |          |
| RC/RU/RM |                                   |    RS    |
|          |                                   |          |
|          |                                   |          |
+----------+                                   +----------+
    Figure 5:  SCIM action for Client Active Pull
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>The SCIM client will perform an HTTP GET to obtain the selected list of Resource Objects (RO) and their Resource Attributes (RA).</t>
  <t>The SCIM Server will return the RO and its RA along with additional metadata information to allow for auditing.</t>
</list></t>

</section>
<section anchor="active-dynamic-query"><name>Active Dynamic Query</name>
<t>A SCIM client uses the HTTP GET verb to request data from a SCIM server. With the action of an active pull, the client will fetch one or multiple objects from the SCIM server. The response data from the SCIM server will include a Dynamic Query (DQ) token that allows the client to subsequent active pulls that will only return RO objects that have changed (including references to deleted objects). The data returned from a dynamic query is usually much smaller, and allows a client to focus only on processing incremental changes rather than performing a full sync every time. With this kind of action, SCIM reconciliations are possible, where the SCIM client can resolve inconsistencies created over time between the client and the SCIM server.</t>

<figure><artwork><![CDATA[
+----------+                                   +----------+
|          |                                   |          |
|          |                                   |          |
|          |                                   |          |
|   SCIM   |                (1)                |          |
|  Server  | <-------------------------------- |  Client  |
|          |                                   |          |
|          |                (2)                |          |
|          | --------------------------------> |          |   
| RC/RU/RM |                                   | RS/RU/RS |
|          |                                   |          |
|          |                                   |          |
+----------+                                   +----------+
    Figure 6: SCIM action for Client Active Dynamic Query
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>The SCIM client will perform an HTTP GET requesting a delta list of Resource Objects (RO) and their Resource Attributes (RA) since the previous SCIM action.</t>
  <t>The SCIM Service Provider will return the delta list of RO and their RA along with additional metadata information for auditing purposes.</t>
</list></t>

</section>
<section anchor="domain-replication-mode"><name>Domain Replication Mode</name>
<t>This is an action specifically for triggers that are events. In this mode, there is an administrative relationship spanning multiple operational domains. Data shared in events typically uses the full mode variation of change events, including the data payload attribute. This eliminates the need for a callback to retrieve additional data.
 "Domain-Based Replication" events (DBR) are used to synchronize resource changes between SCIM service providers within a common administrative domain.</t>

<figure><artwork><![CDATA[
+--------+                +---------------+                 +---------+
|        |                |               |                 |         |
|  SCIM  |                |               |                 |         |
| Client |                |  SCIM Server  |                 |         |
|        |     (1)        |               |      (3)        |  SCIM   |
|        | <------------- |               | --------------> | Server  |
|        |                |               |                 |         | 
| RM/RC  |     (2)        |               |                 |         |
|  /RU   | -------------> |               |                 |         |
|        |                |     RS/RC/RU  |                 |   RS    |
|        |                |               |                 |         |
+--------+                +---------------+                 +---------+
    Figure 7:  SCIM actions aggregated by a SCIM server then 
      transmitted via SCIM Events using Domain Replication Mode
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM Action.</t>
  <t>SCIM Response.</t>
  <t>Event SCIM:prov:op id:xyz</t>
</list></t>

</section>
<section anchor="co-ordinated-provisioning"><name>Co-Ordinated Provisioning</name>
<t>In these relationships, an Event Publisher and Receiver <xref target="SCIM Profile for Security Event Tokens"></xref> typically exchange resource change events without exchanging data. For the receiver to know the value of the data, the Event Receiver usually makes calls back to the SCIM Event Publisher domain to receive a new copy of the data (e.g., using a SCIM GET request).
 In any Event Publisher and Receiver relationship, the set of SCIM resources (e.g., users) that are linked or coordinated is managed within the context of an event feed, which MAY be a subset of the total set of resources on either side. For example, an event feed could be limited to users who have consented to the sharing of information between domains. To support this capability, "feed" specific events are defined to indicate the addition and removal of SCIM resources from a feed.</t>

<figure><artwork><![CDATA[
+--------+                +---------------+                 +---------+
|        |                |               |                 |         |
|  SCIM  |                |               |                 |         |
| Client |                |  SCIM Server  |                 |         |
|        |     (1)        |               |      (3)        |  SCIM   |
|        | <------------- |               | --------------> | Server  |
|        |                |               |                 |         |
| RM/RC  |     (2)        |               |      (4)        |         |
|  /RU   | -------------> |               | --------------> |         |
|        |                |     RS/RC/RU  |                 |   RS    |
|        |                |               |                 |         |
+--------+                +---------------+                 +---------+
    Figure 8:  SCIM actions aggregated by a SCIM server then 
      transmitted via SCIM Events using Co-Ordinated Provisioning
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM Action.</t>
  <t>SCIM Response.</t>
  <t>Event SCIM:prov:op id:xyz</t>
  <t>SCIM Active Pull</t>
</list></t>

</section>
</section>
</section>
</section>
<section anchor="scim-use-cases"><name>SCIM Use Cases</name>
<t>This section describes some common SCIM use cases, explaining when, where, why, and how they are found in cross-domain environments. The ultimate goal is to provide guidance for developers working on common models, explaining the challenges and components involved.
 Because SCIM is a protocol where two entities exchange information about resources across domains, the use cases explain how the different components can interact to support simple to complex architectures for cross-domain resource management. Orchestrator roles are mapped to the use cases to simplify the explanation of the multiple functions of the SCIM elements. The use cases build on each other, starting with simple cases and ending with the most complex ones.</t>

<section anchor="use-cases-for-orchestrator-roles"><name>Use Cases for Orchestrator Roles</name>

<section anchor="resource-subscriber-rs-1"><name>Resource Subscriber (RS)</name>
<t>A Resource Subscriber (RS) receives data from a remote corporate data store. This is a very common and simple SCIM use case, where the Resource Object (RO) and its Resource Attributes (RA) are created by another party. The CRUD operations on these resources trigger specific actions to facilitate the information exchange between two entities, typically the SCIM Client and Server.
 The Resource Subscriber (RS) will decide which RA (Resource Attributes) to consider and how the RO (Resource Object) will appear in its resource database.
 Typically, we find this kind of use case in small to mid-sized organizations, and it is usually seen in on-premises deployments.</t>

<section anchor="single-tenant-resource-subscriber-rs"><name>Single-Tenant Resource Subscriber (RS)</name>
<t>Resource Subscriber (RS) in a single tenant that can either be the SCIM Client or SCIM Server. Typically, we see this in an on-premise application.</t>

<section anchor="single-tenant-resource-subscriber-that-is-the-scim-server"><name>Single-Tenant Resource Subscriber that is the SCIM Server</name>
<t>It is common today for the SCIM Client, typically performing the roles of RM (Resource Manager), RC (Resource Creator), and RU (Resource Updater), to perform CRUD operations on the database of the RS (Resource Subscriber) using the Active Push method. This action delivers RO (Resource Objects) and their RA (Resource Attributes) to the single-tenant RS.
 A good example would be an on-premises application (most commonly a single-tenant application) that creates its own database of objects for its own use, obtaining the objects from a central IdM (Identity Management) system.</t>

<figure><artwork><![CDATA[
                                             Provision Domain
+----------+                                   +----------+
|   SCIM   |                                   |   SCIM   |
|  Client  |                                   |  Server  |
|          |                (1)                |          |
|          | --------------------------------> |          |
| RC/RU/RM |                                   |    RS    |
|          |                                   |          |
| (Source) |                                   |(Consumer)|
+----------+                                   +----------+
    Figure 9: Single-Tenant Resource Subscriber that is the SCIM 
      Server
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active Push</t>
</list></t>

</section>
<section anchor="single-tenant-resource-subscriber-that-is-the-scim-client"><name>Single-Tenant Resource Subscriber that is the SCIM Client</name>
<t>The SCIM Client, which is the RS (Resource Subscriber), will perform CRUD operations on its own database using the Active and/or Delta Pull methods. Source information is available in the SCIM server, which is the IdM (Identity Management) system and is responsible for the roles of RM (Resource Manager), RC (Resource Creator), and RU (Resource Updater) for the RO (Resource Objects) and their RA (Resource Attributes).
 A good example would be an on-premises application (most commonly a single-tenant application) that creates its own database of objects, such as devices, from a central IdM (Identity Management) system. This option is a good solution for situations where the RS (Resource Subscriber) is not reachable from the IdM.</t>

<figure><artwork><![CDATA[
                                             Provision Domain
+----------+                                   +----------+
|   SCIM   |                                   |   SCIM   |
|  Server  |                                   |  Client  |
|          |                (1)                |          |
|          | --------------------------------> |          |
| RC/RU/RM |                                   |    RS    |
|          |                                   |          |
| (Source) |                                   |(Consumer)|
+----------+                                   +----------+
    Figure 10: Single-Tenant Resource Subscriber that is the SCIM 
      Client
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active/Delta Pull</t>
</list></t>

</section>
</section>
<section anchor="multi-tenant-resource-subscriber"><name>Multi-Tenant Resource Subscriber</name>
<t>It only differs from the Single-Tenant Resource Subscriber (RS) by supporting multiple tenants. Typically, we see this in SaaS applications.</t>

<section anchor="multi-tenant-resource-subscriber-that-is-the-scim-server"><name>Multi-Tenant Resource Subscriber that is the SCIM Server</name>
<t>It is the most common today for the SCIM Client, typically performing the roles of RM (Resource Manager), RC (Resource Creator), and RU (Resource Updater), to perform CRUD operations on the database of the RS (Resource Subscriber) using the Active Push method. This action delivers RO (Resource Objects) and their RA (Resource Attributes) to the multi-tenant RS (Resrouce Subscriber).
 A good example would be a SaaS application (most commonly a multi-tenant applications) that creates its own database of objects for its own use, obtaining the objects from a central IdM (Identity Management) system.</t>

<figure><artwork><![CDATA[
                                              Provision Domain
                                              +------------+
+----------+                                  |+----------+|
|   SCIM   |                                  ||   SCIM   ||
| Client A |                                  ||  Server  ||
|          |                (1)               ||          ||
|          | -------------------------------->||          ||
| RC/RU/RM |                                  ||    RS    ||
|          |                                  ||          ||
|(Source A)|                                  ||(Tenant A)||
+----------+                                  |+----------+|
+----------+                                  |+----------+|
|   SCIM   |                                  ||   SCIM   ||
| Client B |                                  ||  Server  ||
|          |                (1)               ||          ||
|          | -------------------------------->||          ||
| RC/RU/RM |                                  ||    RS    ||
|          |                                  ||          ||
|(Source B)|                                  ||(Tenant B)||
+----------+                                  |+----------+|
+----------+                                  |+----------+|
|   SCIM   |                                  ||   SCIM   ||
| Client C |                                  ||  Server  ||
|          |                (1)               ||          ||
|          | -------------------------------->||          ||
| RC/RU/RM |                                  ||    RS    ||
|          |                                  ||          ||
|(Source C)|                                  ||(Tenant C)||
+----------+                                  |+----------+|
                                              +------------+

    Figure 11: Multi-Tenant Resource Subscriber that is the SCIM 
      Server
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active Push</t>
</list></t>

</section>
<section anchor="multi-tenant-resource-subscriber-that-is-the-scim-client"><name>Multi-Tenant Resource Subscriber that is the SCIM Client</name>
<t>The SCIM Client, which is the RS (Resource Subscriber), will perform CRUD operations on its own database using the Active and/or Delta Pull methods. Source information is available in the SCIM server, which is the IdM (Identity Management) system and is responsible for the roles of RM (Resource Manager), RC (Resource Creator), and RU (Resource Updater) for the RO (Resource Objects) and their RA (Resource Attributes).
A good example would be a SaaS application (most commonly a multi-tenant application) that creates its own database of objects for each of its tenants, using a central IdM (Identity Management) system.</t>

<figure><artwork><![CDATA[
                                             Provision Domain
                                              +------------+
+----------+                                  |+----------+|
|   SCIM   |                                  ||   SCIM   ||
| Server A |                                  ||  Client  ||
|          |                (1)               ||          ||
|          | -------------------------------->||          ||
| RC/RU/RM |                                  ||    RS    ||
|          |                                  ||          ||
|(Source A)|                                  ||(Tenant A)||
+----------+                                  |+----------+|
+----------+                                  |+----------+|
|   SCIM   |                                  ||   SCIM   ||
| Server B |                                  ||  Client  ||
|          |                (1)               ||          ||
|          | -------------------------------->||          ||
| RC/RU/RM |                                  ||    RS    ||
|          |                                  ||          ||
|(Source B)|                                  ||(Tenant B)||
+----------+                                  |+----------+|
+----------+                                  |+----------+|
|   SCIM   |                                  ||   SCIM   ||
| Server C |                                  ||  Client  ||
|          |                (1)               ||          ||
|          | -------------------------------->||          ||
| RC/RU/RM |                                  ||    RS    ||
|          |                                  ||          ||
|(Source C)|                                  ||(Tenant C)||
+----------+                                  |+----------+|
                                              +------------+

    Figure 12: Multi-Tenant Resource Subscriber that is the SCIM Client
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active/Delta Pull</t>
</list></t>

</section>
</section>
</section>
<section anchor="resource-creator-rcru"><name>Resource Creator (RC/RU)</name>
<t>Single-tenant provisioning is done using a Resource Creator/Updater (RC/RU), which is responsible for creating the objects that will be passed across different systems. This is a very common and simple SCIM use case, where the Resource Object (RO) and its Resource Attributes (RA) are created. The CRUD operations on these resources trigger specific actions to facilitate the information exchange between two entities, typically the SCIM Client and Server.
It is the responsibility of the Resource Creator/Updater to pass all relevant Resource Attributes (RA) for that specific RS/RM. Typically, we find this kind of use case in small to mid-sized organizations, mainly in on-premises systems, where there is no structured method to handle the resources.</t>

<section anchor="single-tenant-resource-creatorupdater-rcru"><name>Single-Tenant Resource Creator/Updater (RC/RU)</name>
<t>Resource Creator/Updater in a single tenant that can either be the SCIM Client or SCIM Server. Typically, we see this in an on-premise application.</t>

<section anchor="single-tenant-resource-creatorupdater-that-is-the-scim-client"><name>Single-Tenant Resource Creator/Updater that is the SCIM Client</name>
<t>It is common today for the SCIM Client, typically performing the roles RC (Resource Creator) and RU (Resource Updater) to perform CRUD operations on the database of the RS (Resource Subscriber) or RM (Resrouce Manager) using the Active Push method. This action delivers RO (Resource Objects) and their RA (Resource Attributes) from a single-tenant provision service to a Consumer.
A good example would be traditional on-premises HR (Human Resource) applications that creates Resrouce Object (RO) either in central IdM (Identity Management) system or directly in a target aplications.</t>

<figure><artwork><![CDATA[
Provision Domain
+----------+                                   +----------+
|   SCIM   |                                   |   SCIM   |
|  Client  |                                   |  Server  |
|          |                (1)                |          |
|          | --------------------------------> |          |
|   RC/RU  |                                   |  RS/RM   |
|          |                                   |          |
| (Source) |                                   |(Consumer)|
+----------+                                   +----------+
    Figure 13: Single-Tenant Resource Creator/Updater that is the 
       SCIM Client
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active Push</t>
</list></t>

</section>
<section anchor="single-tenant-resource-creatorupdater-that-is-the-scim-server"><name>Single-Tenant Resource Creator/Updater that is the SCIM Server</name>
<t>The SCIM Client, which can be the RS (Resource Subscriber) or RM (Resource Manager), will perform CRUD operations on its own database using the Active and/or Delta Pull methods. Source information is available in the SCIM server, which is the source system responsible for the roles of RC (Resource Creator) and RU (Resource Updater) for the RO (Resource Objects) and their RA (Resource Attributes).
A good example would be a traditional HR on-premises application (most commonly a single-tenant application) that creates its own database of objects and provides them to a SCIM client. The SCIM client can either be an RS (Resource Subscriber), typically a standalone application that requires object information from the HR application, or an RM (Resource Manager), such as an on-premises IdM that will consolidate and add additional RA (Resource Attributes) to the RO (Resource Objects). This option is a good solution for situations where the RS (Resource Subscriber) or RM (Resource Manager) is not reachable from the HR application.</t>

<figure><artwork><![CDATA[
Provision Domain
+----------+                                   +----------+
|   SCIM   |                                   |   SCIM   |
|  Server  |                                   |  Client  |
|          |                (1)                |          |
|          | --------------------------------> |          |
|   RC/RU  |                                   |  RS/RM   |
|          |                                   |          |
| (Source) |                                   |(Consumer)|
+----------+                                   +----------+
    Figure 14: Single-Tenant Resource Creator/Updater that is the 
      SCIM Server
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active/Delta Pull</t>
</list></t>

</section>
</section>
<section anchor="multi-tenant-resource-creatorupdater-rcru"><name>Multi-Tenant Resource Creator/Updater (RC/RU)</name>
<t>It only differs from the Single-Tenant Resource Creator/Updater (RC/RU) by supporting multiple tenants. A typically would be an HR SaaS aplication.</t>

<section anchor="multi-tenant-resource-creatorupdater-that-is-the-scim-client"><name>Multi-Tenant Resource Creator/Updater that is the SCIM Client</name>
<t>It is common today for the SCIM Client, typically performing the roles of RC (Resource Creator) and RU (Resource Updater), to perform CRUD operations on the database of the RS (Resource Subscriber) or RM (Resource Manager) using the Active Push method. This action delivers RO (Resource Objects) and their RA (Resource Attributes) from a multi-tenant provision service to a consumer.
A good example would be any new SaaS HR (Human Resources) application that creates Resource Objects (RO) either in a central IdM (Identity Management) system or directly in target applications.</t>

<figure><artwork><![CDATA[
Provision Domain
+------------+ 
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Client  ||                                   |   Server   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||   RC/RU  ||                                   |   RS/RM    |
||          ||                                   |            |
||(Tenant A)||                                   |(Consumer A)|
|+----------+|                                   +------------+
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Client  ||                                   |   Server   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||   RC/RU  ||                                   |   RS/RM    |
||          ||                                   |            |
||(Tenant B)||                                   |(Consumer B)|
|+----------+|                                   +------------+
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Client  ||                                   |   Server   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||   RC/RU  ||                                   |   RS/RM    |
||          ||                                   |            |
||(Tenant C)||                                   |(Consumer C)|
|+----------+|                                   +------------+
+------------+
    Figure 15: Multi-Tenant Resource Creator/Updater that is the 
      SCIM Client
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active Push</t>
</list></t>

</section>
<section anchor="multi-tenant-resource-creatorupdater-that-is-the-scim-server"><name>Multi-Tenant Resource Creator/Updater that is the SCIM Server</name>
<t>The SCIM Client, which can be the RS (Resource Subscriber) or RM (Resource Manager), will perform CRUD operations on its own database using the Active and/or Delta Pull methods. Source information is available in the SCIM server, which is the source system responsible for the roles of RC (Resource Creator) and RU (Resource Updater) for the RO (Resource Objects) and their RA (Resource Attributes).
A good example would be a SaaS HR (Human Resource) application (most commonly a multi-tenant application) that has its own database of objects and provides them to a SCIM client. The SCIM client can either be an RS (Resource Subscriber), typically a standalone application that requires object information from the HR application, or an RM (Resource Manager), such as an on-premises IdM that will consolidate and add additional RA (Resource Attributes) to the RO (Resource Objects).</t>

<figure><artwork><![CDATA[
Provision Domain
+------------+ 
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Server  ||                                   |   Client   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||   RC/RU  ||                                   |   RS/RM    |
||          ||                                   |            |
||(Tenant A)||                                   |(Consumer A)|
|+----------+|                                   +------------+
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Server  ||                                   |   Client   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||   RC/RU  ||                                   |   RS/RM    |
||          ||                                   |            |
||(Tenant B)||                                   |(Consumer B)|
|+----------+|                                   +------------+
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Server  ||                                   |   Client   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||   RC/RU  ||                                   |   RS/RM    |
||          ||                                   |            |
||(Tenant C)||                                   |(Consumer C)|
|+----------+|                                   +------------+
+------------+
    Figure 16: Multi-Tenant Resource Creator/Updater that is the 
      SCIM Server
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active/Delta Pull</t>
</list></t>

</section>
</section>
</section>
<section anchor="resource-management-rm"><name>Resource Management (RM)</name>
<t>Typically, one or more upstream object databases populate the Resource Manager (RM), which then provides that resource information to downstream services requiring specific sets of the populated objects.
The scenarios described in the next chapter will always outline the concept of upstream services, which are normally the sources of the objects, and downstream services, which are typically the consumers of the objects.
A single-tenant Resource Manager (RM) will receive Resource Objects (RO) and their Resource Attributes (RA) from an upstream entity, which can be either SCIM or non-SCIM. A good example of a non-SCIM upstream source would be connectors that synchronize users and groups using an HTTP REST interface to copy those objects from a database using legacy protocols like LDAP.
Normally, the Resource Manager (RM) will accept objects from multiple sources, and it is its responsibility to understand which Resource Attributes (RA) to obtain from each source. There might also be independent agreements for different groups of Resource Objects (RO).
The Resource Manager (RM) can also assume the roles of Resource Creator (RC) and Resource Updater (RU), where some or all of the Resource Objects (RO) or some of their Resource Attributes (RA) are created locally. These kinds of deployments are very common in greenfield deployments.</t>

<section anchor="single-tenant-resource-manager-rm"><name>Single-Tenant Resource Manager (RM)</name>
<t>Single-Tenant Resrouce Manager are tipically Identity Manager (IdM) that are on-premises, where the upStream is tipically also on-premise but the Downstream can iether be on-premise, Cloud or hybrid application.</t>

<section anchor="single-tenant-resource-manager-that-is-the-scim-server"><name>Single-Tenant Resource Manager that is the SCIM Server</name>
<t>The upstream service will provide one or more sources of Resource Objects (RO) and their Resource Attributes (RA). If the source is a SCIM Client, it will use the Active Push method to deliver that information to the Resource Manager, which will be the SCIM Server and the consumer of those Resource Objects. The same Resource Manager will act as a SCIM server for the downstream consumer, which will be the SCIM Client performing the actions of Active/Delta Push.
This is a partial implementation used by some IdM systems today, where they obtain Resource Objects from legacy databases using non-SCIM protocols and provide Resource Objects (RO) to downstream services, typically SaaS applications that need to create their own database of Resource Objects.</t>

<figure><artwork><![CDATA[
                        Provision Domain
 UpStream           +-----------------------+        DownStream
+----------+        |+---------++----------+|        +---------+
|   SCIM   |        ||   SCIM  ||   SCIM   ||        |   SCIM  |
|  Client  |        ||  Server ||  Server  ||        |  Client |
|   RC/RU  |  (1)   ||  RS/RM  || RM/RC/RU ||        |         |  
|(Source A)|------->||         ||          ||        |         |         
+----------+        ||         ||          ||  (3)   |    RS   |
+----------+        ||  RC/RU  ||          ||------->|         |
|    Non   |        ||         ||          ||        |         |
|   SCIM   |  (2)   |!         !|          ||        |         |
|          |------->||(Consumer||          ||        |(Consumer|  
|(Source B)|        ||   A,B)  ||(Source Z)||        |     Z)  |
+----------+        |+---------++----------+|        +---------+
                    +-----------------------+ 
    Figure 17: Single-Tenant Resource Manager that is the SCIM Server
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active Push</t>
  <t>Non SCIM action</t>
  <t>SCIM action - SCIM Client performs Active/Delta Pull</t>
</list></t>

</section>
<section anchor="single-tenant-resource-manager-that-is-the-scim-client"><name>Single-Tenant Resource Manager that is the SCIM Client</name>
<t>The upstream service will provide one or more sources of Resource Objects (RO) and their Resource Attributes (RA). If the source is a SCIM Server, the Resource Manager, which will act as a SCIM Client, will use the Active/Delta Pull method to obtain that information. The same Resource Manager will act as a SCIM Server for the downstream consumer and will perform the action of pushing a select group of Resource Objects (RO) and their Resource Attributes (RA) to the consumer service.
This is a partial implementation used by some IdM systems today, where they obtain Resource Objects from legacy databases using non-SCIM protocols and provide Resource Objects (RO) to downstream services, typically SaaS applications that need to create their own database of Resource Objects.</t>

<figure><artwork><![CDATA[
                        Provision Domain
 UpStream           +-----------------------+        DownStream
+----------+        |+---------++----------+|        +---------+
|   SCIM   |        ||   SCIM  ||   SCIM   ||        |   SCIM  |
|  Server  |        ||  Client ||  Client  ||        |  Server |
|   RC/RU  |  (1)   ||  RS/RM  || RM/RC/RU ||        |         |  
|(Source A)|------->||         ||          ||        |         |         
+----------+        ||         ||          ||  (3)   |    RS   |
+----------+        ||  RC/RU  ||          ||------->|         |
|    Non   |        ||         ||          ||        |         |
|   SCIM   |  (2)   |!         !|          ||        |         |
|          |------->||(Consumer||          ||        |(Consumer|  
|(Source B)|        ||   A,B)  ||(Source Z)||        |     Z)  |
+----------+        |+---------++----------+|        +---------+
                    +-----------------------+ 
    Figure 18: Single-Tenant Resource Manager that is the SCIM Client
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active/Delta Pull</t>
  <t>Non SCIM action</t>
  <t>SCIM action - SCIM Client performs Active Push</t>
</list></t>

</section>
<section anchor="single-tenant-resource-manager-that-is-the-scim-server-and-scim-client"><name>Single-Tenant Resource Manager that is the SCIM Server and SCIM Client</name>
<t>The upstream service will provide one or more sources of Resource Objects (RO) and their Resource Attributes (RA).
This scenario we will use as SCIM action Active/Delta Pull from the UpStream to the Resource Manager and the same action from it to the DownStream, for the scenarios where the initial Source is a SCIM server and the final Consumer is the SCIM Client.
This scenarios we will use as SCIM action Active Push from the UpStream to the Resource Manager and the same action from it to the DownStream, for the scenarios where the initial Source is a SCIM Client and the final Consumer is the SCIM Server.
This is a partial implementation used by some IdM systems today, where they obtain Resource Objects from legacy databases using non-SCIM protocols and provide Resource Objects (RO) to downstream services, typically SaaS applications that need to create their own database of Resource Objects.</t>

<figure><artwork><![CDATA[
                        Provision Domain
 UpStream           +-----------------------+        DownStream
+----------+        |+---------++----------+|        +---------+
|   SCIM   |        ||   SCIM  ||   SCIM   ||        |   SCIM  |
|  Server  |        ||  Client ||  Server  ||        |  Client |
|   RC/RU  |  (1)   ||  RS/RM  || RM/RC/RU ||        |         |  
|(Source A)|------->||         ||          ||        |         |         
+----------+        ||         ||          ||  (3)   |    RS   |
+----------+        ||  RC/RU  ||          ||------->|         |
|    Non   |        ||         ||          ||        |         |
|   SCIM   |  (2)   |!         !|          ||        |         |
|          |------->||(Consumer||          ||        |(Consumer|  
|(Source B)|        ||   A,B)  ||(Source Z)||        |     Z)  |
+----------+        |+---------++----------+|        +---------+
                    +-----------------------+ 
    Figure 19: Single-Tenant Resource Manager that is the SCIM Client
      and SCIM Server
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active/Delta Pull</t>
  <t>Non SCIM action</t>
  <t>SCIM action - SCIM Client performs Active/Delta Pull</t>
</list></t>

<figure><artwork><![CDATA[
                        Provision Domain
 UpStream           +-----------------------+        DownStream
+----------+        |+---------++----------+|        +---------+
|   SCIM   |        ||   SCIM  ||   SCIM   ||        |   SCIM  |
|  Client  |        ||  Server ||  Client  ||        |  Server |
|   RC/RU  |  (1)   ||  RS/RM  || RM/RC/RU ||        |         |  
|(Source A)|------->||         ||          ||        |         |         
+----------+        ||         ||          ||  (3)   |    RS   |
+----------+        ||  RC/RU  ||          ||------->|         |
|    Non   |        ||         ||          ||        |         |
|   SCIM   |  (2)   |!         !|          ||        |         |
|          |------->||(Consumer||          ||        |(Consumer|  
|(Source B)|        ||   A,B)  ||(Source Z)||        |     Z)  |
+----------+        |+---------++----------+|        +---------+
                    +-----------------------+ 
    Figure 20: Single-Tenant Resource Manager that is the SCIM Server 
      and SCIM Client
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active Push</t>
  <t>Non SCIM action</t>
  <t>SCIM action - SCIM Client performs Active Push</t>
</list></t>

</section>
</section>
<section anchor="multi-tenant-resource-manager-rm"><name>Multi-Tenant Resource Manager (RM)</name>
<t>Multi-Tenant Resource Manager are typically Identity Manager (IdM) that are cloud base, normally designated as IDaaS, where the upStream and Downstream are either on-premise or Cloud base.</t>

<section anchor="multi-tenant-resource-manager-that-is-the-scim-server"><name>Multi-Tenant Resource Manager that is the SCIM Server</name>
<t>Same information as Single-Tenant Resource Manager that is the SCIM Server but the Provision domain has multiple Tenants</t>

</section>
<section anchor="multi-tenant-resource-manager-that-is-the-scim-client"><name>Multi-Tenant Resource Manager that is the SCIM Client</name>
<t>Same information as Single-Tenant Resource Manager that is the SCIM Client but the Provision domain has multiple Tenants</t>

</section>
<section anchor="multi-tenant-resource-manager-that-is-the-scim-server-and-scim-client"><name>Multi-Tenant Resource Manager that is the SCIM Server and SCIM Client</name>
<t>Same information as Single-Tenant Resource Manager that is the SCIM Server and SCIM Client but the Provision domain has multiple Tenants</t>

</section>
</section>
</section>
</section>
<section anchor="specific-implementations"><name>Specific Implementations</name>

<section anchor="partner-device-registry"><name>Partner Device Registry</name>
<t>An important step in making a device work is to provide its details from the manufacturer to the customer. The Resource Object (RO) of the device, provided by the manufacturer, includes its Resource Attributes (RA), such as certificates, pairing protocols, and other relevant details.</t>

<section anchor="manufacturer-details-provided-to-customer-by-vendor-that-is-the-scim-client"><name>Manufacturer details provided to customer by vendor that is the SCIM client</name>
<t>The manufacturer is the multi-tenant SCIM client and will push details of devices acquired by specific customers to their SCIM servers. The customer will provide the SCIM server and will receive information from the acquired devices. Additionally, the customer will manage the attributes of those devices, assuming the roles of Resource Subscriber (RS), Resource Updater (RU), and Resource Manager (RM). After the initial creation of the Resource Object (RO) in the customer's device database, it will be the server's responsibility to add and update the Resource Attributes (RA).
Typically, the device will reach out to a device manager in the customer's network, which will provide the SCIM server endpoint to the manufacturer. This task can also be done manually at the time of the device acquisition, allowing a SCIM push of the Resource Object (RO) to the customer's device management platform.</t>

<figure><artwork><![CDATA[
Provision Domain
+------------+ 
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Client  ||                                   |   Server   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||    RC    ||                                   |  RS/RU/RM  |
||          ||                                   |            |
||(Tenant A)||                                   |(Customer A)|
|+----------+|                                   +------------+
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Client  ||                                   |   Server   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||    RC    ||                                   |  RS/RU/RM  |
||          ||                                   |            |
||(Tenant B)||                                   |(Costumer B)|
|+----------+|                                   +------------+
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Client  ||                                   |   Server   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||    RC    ||                                   |  RS/RU/RM  |
||          ||                                   |            |
||(Tenant C)||                                   |(Costumer C)|
|+----------+|                                   +------------+
+------------+
    Figure 21: Manufactor is the SCIM client and push RO to Customers 
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active Push</t>
</list></t>

</section>
<section anchor="manufacturer-details-provided-by-requesting-it-from-customer-that-is-the-scim-client"><name>Manufacturer details provided by requesting it from Customer that is the SCIM client</name>
<t>The manufacturer is the multi-tenant SCIM server that holds the details of the Resource Objects, which it can provide to customers who acquire them. The customer will provide a SCIM client that will perform an Active Pull of the Resource Objects acquired from a specific manufacturer.
The SCIM client will have the roles of Resource Subscriber (RS), Resource Manager (RM), and Resource Updater (RU), because after creating the Resource Object (RO) in its object database, it will be responsible for updating and modifying that object.
This use case is especially interesting for customers whose Device Manager is not reachable from the Internet. In such cases, the Device Manager will act as a SCIM client and perform the action of pulling the Resource Object (RO) from the multi-tenant SCIM server provided by the manufacturer.</t>

<figure><artwork><![CDATA[
Provision Domain
+------------+ 
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Server  ||                                   |   Client   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||    RC    ||                                   |  RS/RU/RM  |
||          ||                                   |            |
||(Tenant A)||                                   |(Consumer A)|
|+----------+|                                   +------------+
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Server  ||                                   |   Client   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||    RC    ||                                   |  RS/RU/RM  |
||          ||                                   |            |
||(Tenant B)||                                   |(Consumer B)|
|+----------+|                                   +------------+
|+----------+|                                   +------------+
||   SCIM   ||                                   |    SCIM    |
||  Server  ||                                   |   Client   |
||          ||                (1)                |            |
||          || --------------------------------> |            |
||    RC    ||                                   |  RS/RU/RM  |
||          ||                                   |            |
||(Tenant C)||                                   |(Consumer C)|
|+----------+|                                   +------------+
+------------+
    Figure 22: Manufactor is the SCIM Server and Customers Pull 
      information about Device
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active Pull</t>
</list></t>

</section>
</section>
<section anchor="device-identity-creation-from-commissioner-tool"><name>Device Identity Creation from Commissioner Tool</name>
<t>When devices are initially provisioned from the client application (mobile application, web application, etc.), the client application will allow for the provision of additional details about the devices that are specific to that installation.
Whether the commissioning tool is already SCIM-enabled or the client application includes the commissioning tool, there will ultimately be a SCIM action to perform an Active Push. This action will provide the additional Resource Attributes (RA) to be added to the Resource Object (RO) that is maintained in the device manager.</t>

<figure><artwork><![CDATA[
Device Manager                Client App        Commissioner Tool
+--------+                +---------------+    (2)   +----+
|        |                |  SCIM client  | <------> | RA |
|  SCIM  |     (1)        | +----+ +----+ |          +----+
| Server | <------------- | | RA | | RA | |    (2)   +----+
|        |                | +----+ +----+ | <------> | RA |
|        |                +---------------+          +----+
|        |                           Client App + Comissioner Tool
|        |                               +--------+
|  RC/RU |               (1)             |   RA   |
|  RM/RS | <---------------------------- |  SCIM  |
|        |                               | Client |
+--------+                               +--------+
    Figure 23:  Commissioner tool provide Resource Attribtues to 
      Device Manager
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM client performs Active Push</t>
  <t>Non SCIM action</t>
</list></t>

</section>
<section anchor="client-applications-gets-directory-services"><name>Client Applications gets directory Services</name>
<t>The client application retrieves information about all devices and their attributes from the Device Manager for their environments. The client application typically downloads the full list of devices daily during non-working hours, with an optional on-demand sync. SCIM clients should only be able to access the devices that they manage.</t>

<figure><artwork><![CDATA[
Device Manager                Client App        Commissioner Tool
+--------+                +---------------+    (2)   +----+
|        |                |  SCIM client  | <------> | RA |
|  SCIM  |     (1)        | +----+ +----+ |          +----+
| Server | -------------> | | RA | | RA | |    (2)   +----+
|        |                | +----+ +----+ | <------> | RA |
|        |                +---------------+          +----+
|        |                         Client App + Comissioner Tool
|        |                               +--------+
|  RC/RU |               (1)             |   RA   |
|  RM/RS |  ---------------------------> |  SCIM  |
|        |                               | Client |
+--------+                               +--------+
    Figure 24: Device manager provides RO and RA to the Devices 
      through Commissioner Tool
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM client performs Active Pull</t>
  <t>Non SCIM action</t>
</list></t>

</section>
<section anchor="provide-credetials-to-manage-device"><name>Provide Credetials to manage Device</name>
<t>The Device Manager can provide Resource Attributes to the client application so that the devices can be configured using the commissioning tool. For example, the Device Manager can provide credentials to the device using the client application as the gateway. Through the commissioning tool, which can be a single entity, these credentials can be delivered to the device.</t>

<figure><artwork><![CDATA[
Device Manager                Client App        Commissioner Tool
+--------+                +---------------+    (2)   +----+
|        |     (1)        |               | <------> | RA |
|  SCIM  | -------------> |  SCIM Server  |          +----+
| Client |                |               |    (2)   +----+
|        |                |      RS       | <------> | RA |
+--------+                +---------------+          +----+
    Figure 25:  Device Manager provide Resource Attributes to the 
      Commissioner tool to configure device
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM client performs Active Push</t>
  <t>Non SCIM action</t>
</list></t>

</section>
<section anchor="enterprise-last-mile-applications"><name>Enterprise "Last Mile" Applications</name>
<t>When provisioning to line of business Enterprise applications, implementers are often dealing with software that cannot be easily modified. As a result, it may be necessary to perform system integrations that run at the application layer, the database layer, or the framework layer in order to insert or change user data sourced from SCIM infrastructure. Connectors often use a client active pull over a periodic interval to keep the application in sync. It is also common for this pattern to include a just-in-time SSO trigger, so that should a new user try to access the line of business application before the resource has been created by the periodic active pull, they are created instead based on the contents of the user's SAML assertion and then managed going forward by SCIM active pulls.</t>

</section>
<section anchor="ra-authority-in-saas-application"><name>RA authority in SaaS Application</name>
<t>Sometimes, not all the Resource Attributes (RA) of a Resource Object (RO) are owned (created) by the Resource Creator (RC) or Resource Updater (RU). Very specialized Resource Attributes (RA) can be the responsibility of a SaaS application. For example, an IdM should create user records with standard attributes like first name, last name, home address, etc., but the SaaS application should define the email attribute if that SaaS application is an email server.</t>

<section anchor="implementers-provision-domain-is-a-scim-client-and-a-scim-server"><name>Implementers Provision Domain is a SCIM Client and a SCIM server</name>
<t>The implementer's domain acts as the SCIM Client and is the authority for regular attributes such as first name, last name, home address, etc., of a user. These attributes are created and updated by the Provision Domain, which functions as the Resource Manager (RM), Resource Creator (RC), and Resource Updater (RU).
The application is the authority for one or more specific Resource Attributes (RA), such as the email address of a given user. This means the application will serve as the Resource Manager (RM), Resource Creator (RC), and Resource Updater (RU) for those specific attributes only.
Both the Provision Domain and the application will function as both the SCIM Client and SCIM Server for the respective Resource Attributes they are responsible for. They will use the SCIM action of Active Push to pass the Resource Attributes of the Resource Object to their counterpart.
Thus, both the roles of SCIM Server and SCIM Client exist within the Provision Domain and the application.</t>

<figure><artwork><![CDATA[
                                                 Application
Provision Domain                                  Customer A
+------------+                                  +------------+ 
|+----------+|                                  |+----------+|
||   SCIM   ||                                  ||   SCIM   ||
||  Client  ||                                  ||  Server  ||
||          ||                (1)               ||          ||
||          || -------------------------------> ||          ||
|| RM/RC/RU ||                                  ||    RS    ||
||          ||                                  ||          ||
||          ||                                  ||          ||
|+----------+|                                  |+----------+|
|+----------+|                                  |+----------+|
||   SCIM   ||                                  ||   SCIM   ||
||  Server  ||                                  ||  Client  ||
||          ||                (1)               ||          ||
||          || <------------------------------- ||          ||
||    RS    ||                                  || RM/RC/RU ||
||          ||                                  ||          ||
||          ||                                  ||          ||
|+----------+|                                  |+----------+|
+------------+                                  +------------+
    Figure 26: Single Ro with diferent RA authority implemented 
      between the Provision Domain and the customer SaaS App 
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active Push</t>
</list></t>

</section>
<section anchor="implementers-provision-domain-is-a-scim-client"><name>Implementers Provision Domain is a SCIM Client</name>
<t>The implementer's domain acts as the SCIM Client and is the authority for regular attributes, such as first name, last name, home address, etc., of a user. These attributes are created and updated by the Provision Domain, which functions as the Resource Manager (RM), Resource Creator (RC), and Resource Updater (RU).
The application is the authority for one or more specific Resource Attributes (RA), such as the email address of a given user. This means the application will serve as the Resource Manager (RM), Resource Creator (RC), and Resource Updater (RU) for those specific attributes only.
In this use case, since the Provision Domain is always the SCIM Client and the application is always the SCIM Server, the Active Push method will be used for the regular attributes of the Resource Objects (RO). The Active/Delta Pull method will be used to retrieve the specialized Resource Attributes that are the responsibility of the application.</t>

<figure><artwork><![CDATA[
                                              Application
Provision Domain                               Customer A
+----------+                                  +----------+
|   SCIM   |               (1)                |   SCIM   |
|  Client  | -------------------------------> |  Server  |
|          |                                  |          |
|          |               (2)                |          |
| RM/RC/RU | <------------------------------- |    RS    |
|          |                                  |          |
+----------+                                  +----------+
    Figure 27: Single RO with diferent RA authority implemented 
      between the Provision Domain and the customer SaaS App 
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>SCIM action - SCIM Client performs Active Push</t>
  <t>SCIM action - SCIM Client performs Active/Delta Pull</t>
</list></t>

</section>
</section>
<section anchor="reconciliations"><name>Reconciliations</name>
<t>Because of inconsistencies or mistakes in the SaaS App Resource Objects and it attributes might change and there is no visibility of the IdM that it happens.
System will do reconciliation to make sure that Resource Objects (RO) and its Resrouce Attributes (RA) are consistent across different systems.
If there is a new attributes from SCIM Server in the Delta Pull, the SCIM client will do a push to fix it and make again synchronize</t>

<figure><artwork><![CDATA[
                                              Application
Provision Domain                               Customer A
+----------+                                  +----------+
|   SCIM   |               (1)                |   SCIM   |
|  Client  | -------------------------------> |  Server  |
|          |               (2)                |          |
|          | <------------------------------- |          |
| RM/RC/RU |               (3)                |    RS    |
|          | -------------------------------> |          |
+----------+                                  +----------+
    Figure 28: Reconciliation of RO/RA between IDM and Application
]]></artwork></figure>

<t><list style="numbers" type="1">
  <t>Regular SCIM action - SCIM Client performs Active Push</t>
  <t>SCIM action - SCIM Client performs Active/Delta Pull</t>
  <t>Remediation SCIM action - SCIM Client performs Active Push</t>
</list></t>

</section>
</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>
<t>Authentication and authorization must be ensured for SCIM operations to guarantee that only authenticated entities can perform SCIM requests and that the requested SCIM operations are authorized.
SCIM resources (e.g., Users and Groups) can contain sensitive information. Therefore, data confidentiality must be ensured at the transport layer.
There can be privacy issues that extend beyond transport security, such as moving personally identifiable information (PII) offshore between different SCIM elements. Regulatory requirements must be met when migrating identity information between different jurisdictions (e.g., countries and states may have differing privacy regulations).
Additionally, privacy-sensitive data elements may be omitted or obscured in SCIM transactions or stored records to protect these data elements for a user. For instance, a role-based identifier might be used instead of an individual's name.
Detailed security considerations are specified in Section 7 of the SCIM protocol <xref target="RFC7644"></xref> and Section 9 of the SCIM schema <xref target="RFC7643"></xref>.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>
<t>There are no additional IANA considerations to those specified <xref target="RFC7643"></xref> and <xref target="RFC7644"></xref>.</t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

</section>


  </middle>

  <back>


<references title='References' anchor="sec-combined-references">

    <references title='Normative References' anchor="sec-normative-references">



<reference anchor='RFC2119'> <front> <title>*** BROKEN REFERENCE ***</title> <author> <organization/> </author> <date/> </front> </reference>



    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor='RFC7643'> <front> <title>*** BROKEN REFERENCE ***</title> <author> <organization/> </author> <date/> </front> </reference>
<reference anchor='RFC7644'> <front> <title>*** BROKEN REFERENCE ***</title> <author> <organization/> </author> <date/> </front> </reference>
<reference anchor='RFC9110'> <front> <title>*** BROKEN REFERENCE ***</title> <author> <organization/> </author> <date/> </front> </reference>
<reference anchor='RFC9112'> <front> <title>*** BROKEN REFERENCE ***</title> <author> <organization/> </author> <date/> </front> </reference>
<reference anchor='RFC8417'> <front> <title>*** BROKEN REFERENCE ***</title> <author> <organization/> </author> <date/> </front> </reference>

<reference anchor="SCIM Profile for Security Event Tokens" target="https://datatracker.ietf.org/doc/draft-ietf-scim-events">
  <front>
    <title>SCIM Profile for Security Event Tokens</title>
    <author initials="P." surname="Hunt" fullname="P. Hunt">
      <organization></organization>
    </author>
    <author initials="N." surname="Cam-Winget" fullname="N. Cam-Winget">
      <organization></organization>
    </author>
    <author initials="M." surname="Kiser" fullname="M. Kiser">
      <organization></organization>
    </author>
    <author initials="J." surname="Schreiber" fullname="J. Schreiber">
      <organization></organization>
    </author>
    <date year="2024" month="August"/>
  </front>
</reference>


    </references>

</references>


<?line 993?>



  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+19bXMbR5Lmd0bwP9TKH0yeQciWteMZ3sbEQZQ8ps80tQB1
c7sTjotCdwGoUaMLW1VNChOM/e0XmVmv3Q2AIClb8pAfJBLortesfH0y6+Tk
5PDAWF6X/49XqhanzOpGHB6Uqqj5UpyyUvOZPZHCzk5MIZcnjREnBTfCnHz9
9eGBXGl8w9gXX3/9p69fHB6YZrqUxkhV2/VKnLLzN1ffHx68F+sbpctT9rfz
2gpdC3vyGhoesMnZ+cUvhwc3Sr+fa9WsTvGTw4PDg4LbUybrmTo8sNJW4pR9
OVkbK5ZspjQ708qYk1ItuazZeSlqK+2aXfCaz8VS1PaUvRYzWUsrVW0G7PJa
6GspbgbsTNWFWFkzYLwu2Vj8VyM1vmG+PDzg06kW19DT2fkFe2cEO4O5fnl4
8BOv56dM1IcHvLELpU8PD04YLdFb3lSK/aj0XLAzpbWQ/PCAMaXnp+xMmkIx
GreBT8WSy+qUrXhTwKP/q4AHhoVawpRji0tRcfZa1vNKhLYuZKGVUTMLvayU
5jC3pM0vV/jasMTX/tfSPw6tfwnN10ovuZXX4hTeGn9/9uKbb/50Ct/AMre+
++4PL79Nfn/pf//TN998nfz+wv/+x5fffIe/49K91WomK4FbNRFFo2F33lyL
2rIr9V7UBh9ljFmu58KesoW1K3P6/HnJLbeaF++FHgLVDZWePy9V8bxNiAIa
M74VIpC7de3eCfuIf4WlH7Ifmtq2Pv15yM748uSvsp6L9ncXQ/a/pRG69fGP
QzYpFlrIafiq5Facshdfv3h58vUfGW74yQnjUwMTtvD31UIaVqqiAYJkK62u
ZSkMK1NSVo6UkX6NqERhRckaIxieS6ZmzC4E2+OssCNYuOMhY+eWVXxtmGos
NmKwkS8NK8KpWapSVO70zCp1436Vlsm6qBoYbhiL+2q5qrAfJFhoyshSEPma
oV+GpSxLIPbDgy/YeW21KpuCCPzqXrNhM76U1RqWw6xEIWeyoB7Z3xx1/4Kj
c3+9/IXB0gsj57UomVVsiS0yLYxqdEHTKpmscWFWsGOyENC89GNYxjHYBbes
FtTSVLBCLZdNDUMQJeNwMA2TjhUymotxG6qvZQFLdyPtAvrU9AVyR8O4wf5L
MeNNZZPRmWa1UhqaP4LHec3EBytqI6eywsHBvuEC8rJEWuJVeD2lsOMhLXlr
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
fInatAutmvmi72zcm41W1Z3Y6FvH3c+0KAWozsjUHerBq/ZXXSaXuo77lDYf
6u7yO6MCNwnsxVUeKlQ9w+Usk/qrXYV0yL6He6CpDFGvYzIdXQEzq8PUElUw
6aM7TE4McM6tuOFYTYb2aJOOnJVQChfj+QJLdGliOhT3pKswErVaGtsny18z
Ftk+Ttv464YD23PrSuzZH8/uwe35ew+xwMKlrf3D3nPB8mGzhCn862lbMbrL
ofFsoauLYQUsd0YcpXx8TesNRARWGlCiz37ixrILWYlnmeblLPHsJlWrGFZf
UzM2hZMGKkXSVJr+NIhpXVgPDIofzSya9hyDBajWGDWzN4ibdddMQgQD6pVx
A0oRRk0kXFw6gmiEFqapqNDPkqN6UwtQa7hep4aqq7kM4ZO5TpOxdFN7HFDK
Fiq+9oUGQlaW+8wZ2DPNlwLRiPg53uapSwIbytoIjZdgustPoQAaNuRyJJ2v
AjdC1jPNww2fQ0iV84XUaHUwJhV4F+3qCmNs6MSBOUpVyoKCQ9cc6ee9EKvO
rOB2UlQP6cIWREW50likzUrDVtxCZIimgQ4DxtnfG2NPZH2CUKnJ5NLfBjsI
bN7pmByvG8HpWtqBRMvs0Ek6tqmYKZ1fZ4ow0ylcGuuLfrlIUJhxshoD0lvT
EmHgUBGcsM6lvw6mULVFrdhFKGGsXxo2GV38BOg+wGi6u3exAiKJyJLNlQu5
3XCN4wiHyPVvhvEojUeMN3ahNHi3ZE2JgMlBOjyYqKWAxTQDDNDhjbFbUHZU
hK//sl84RTfgADly8z72y9RfuE3p/gDokP0fKJXmYo14b+3G4SRV2rsX8vJO
4mNLkvOacjiJZFwaJNKMFoXSpXGMAMty6zI1xrC830xqY1nNl2LAKh5+XUBy
KC9LLYwhV94gIJjbI/Kdl2LmS0eKJZdV7IvJGVF251WJtbvpceNTWB1U4Dxl
cO3QZH+SbJYtTEpYwiYBPEgvcwyfd+HnWJaQPo5EB8dZi3lT8cyW9VDkPVYQ
NxQ2x1faS5pLD1vEi4Zj2p6/155mTe3KjrnpbIjV99LvlhC+gw209qq7MFnO
erjpeSd+OyESWiJam7m8JibtUadLwWvT4b3oDsVNfuRZO9YN0f94N3eCYa6r
9fDw4JWyi95NCYnancH6bYLxTv3rbcrrq3SjEbBgsxqmqfrj+XQLHYEEts6r
9KSqSqhRRzqNv9p7E9/cgNANEPRCNaimcE2gi8YM4jQDwGRbeoT4AG4b4FXO
93yXtd2dyL3xJ5Mgnb52/kQMaQcjsfPnwZiK/Pn9A5j58/vD/vJ45/7hy/z5
faOXf+57vyd1c8f8nTWze/yb3t84/v3ff+j+fwL0s0/8O6e3R6efrTEDDBv0
vu/p4U7jT+jt86efhzGw3Hz/g09lZWNFqmcpXVHlXJMPalkZjPepsDdgoWxl
/wFR6Q2BRwKm7qdtflzdcvCkXP7TKpfnNfkOPGh1AH7RQvQfCnQ8YOH+Pmrr
uCy6T6dVIHvqOXvsLdYMiippxxbaVpOcongbS0RmXVgV4ouUV7fDgA4AkH7r
+ZHUxYfoihsUxf247Parujfgw/zTrdoZO4Tjn1kqzPe98Tp9euu75Hne+m4U
sXeQ6CwK8IeN+SF7xBI5+F2Ug5efhxwkn/Z9a9LQ5SpwZYispHMKHx68cmkA
agYOUDicxoq6kMAyNFtKY/l7RBJExxLMpJvpQNdFJByHLnVwLmG3JloQSJ/B
iuVcINwIJ+G2vNVK4D3JE/JkIwsqFXrM4vgpqPdeMNN4B/rmSnwua53uLui9
asFPHtzOWhmT3DbhCrAB85/FeZD7tw2eSG1ot2xxIwadbB4/NU45PVaxmfyA
SwlJEzA7PufOle1uGHliko/JJO/A6JIv7sbokncTJtnq99v+fvuZ5F3mm/T7
WEzyj6ctnoFpSJfPx6PAA89fXyCtZuSV8bmxU0d+TX5HlXDGYilKN/B7WB1s
IooGhQAAmWXpL1c9PBg1EC+xIa4Onm2SGP+gT5aNoThebTD0D6oZ9plc0WoV
mzdc89oKx77oMtHYtigp2C4dnMAH+LAll4fngVwuruc+FWWnO2ByfpCiBOZK
rfhCpkdiOB8O2LtwfdFf8I4din9AIAnZkKihUkBei8Ld4wMhrQEF/jCg62AB
sH7t5fDFCDSvDRRBobAiWR3AiynistLyGipYSmMar0uKD1bUcAfTWsG0QwPG
bVU0MpbqGkuOCG2oFAajEc2ku8A2guOO3p6fQ9hpZhZgyXjSjgIAl0qQHmA8
RSMez12ZSlfw+GkuhYWiRTUIQU05cNLjv9N+ux39vdHSlNIZdW5L0HmrpcPs
GctRvvI1pQjSy1RdhdaL9H9sAu+6zcqBuIdO4k7ijvnJ+cCyWkprCWGtpqbA
XZPuFOGqh8tUNDNWwdc+nkXVaiz6n9HOzTuAo+DtYIiUIRK8hgI0HD3RJxTB
9JsltFMlvAniA51gMkKUt5TXsmx4BRU1+BJQJq8Rjy7KQBQk3MvsKDgLz01L
EGP4zqsjWYFU9rfx92ff/eHly1/IK+4e/lP2sCkWYsn9o9/+QmEydj76edRh
H0TldDVbihTHh1tjRRd+YpKKMvaBwwmDcz2Oive1uqlEScU3DF12BLJpyov3
hwf/HygXMoAUIgEA

-->

</rfc>

